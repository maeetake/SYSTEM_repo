## Generate Python Code for Module: visualize_training_history

Please generate Python module code based on the detailed specifications below. Ensure strict adherence to all specified requirements and accurately reflect the provided examples. If there are any ambiguities or contradictions in the specifications, use comments in the code to explain the reasoning and adopt a solution that prioritizes functionality and clarity.

**1. Model Overview:**

* **Role and Purpose:** The purpose of this module is to provide a diagnostic tool to analyze the training phase of the deep learning models. By plotting training and validation loss curves on the same graph, it helps in identifying model behaviors such as overfitting (validation loss increases while training loss decreases), underfitting (both losses remain high), or ideal convergence. These visualizations are essential for validating the training strategy and for inclusion in final reports.
* **Overall Specification:**
```json
{
    "model_role": "An AI model to predict the next-day closing price of NVIDIA stock using historical price data.",
    "instructions": [
        "Load the user-provided CSV file containing daily OHLC data.",
        "Preprocess the data: handle missing values, normalize features, and create sequential data for time series forecasting.",
        "Split the dataset chronologically into training (80%), validation (10%), and test (10%) sets.",
        "Build two separate deep learning models: one using LSTM and another using a Transformer architecture.",
        "Train both models on the training set, using the validation set to monitor performance and prevent overfitting.",
        "Evaluate the trained models on the test set using RMSE and MAE as performance metrics.",
        "Visualize the prediction results by overlaying predicted values on actual values in a time series graph.",
        "Generate a plot showing the training and validation loss function transition over epochs for each model."
    ],
    "constraints": [
        "The sole data source must be the user-provided CSV file.",
        "Only Open, High, Low, Close (OHLC) data from the file should be used as input features.",
        "The model must predict the closing price for only one day ahead.",
        "The selection of predictive models is strictly limited to LSTM and Transformer.",
        "External data sources or APIs for data acquisition are prohibited."
    ],
    "model_details": {
        "data_acquisition": [
            "The model will be built using a single CSV file provided by the user.",
            "The file must contain daily stock data for the last 5.5 years with columns for 'Date', 'Open', 'High', 'Low', and 'Close'.",
            "Note: The data will be provided by the user directly. Do not use APIs, libraries, or external sources to acquire data without explicit instructions from the user."
        ],
        "data_preprocessing": [
            "Check for and handle any missing values in the dataset (e.g., using forward fill).",
            "Normalize the OHLC data using a scaler like MinMaxScaler to a range of [0, 1] to improve model stability and convergence.",
            "Create input sequences (X) and corresponding target values (y). For example, use a sliding window of the past 60 days of OHLC data to predict the closing price of the 61st day."
        ],
        "model_selection": [
            "Two models will be implemented and compared:",
            "1. LSTM (Long Short-Term Memory): A type of Recurrent Neural Network (RNN) well-suited for learning from sequential data like time series.",
            "2. Transformer: A model architecture based on self-attention mechanisms, which can capture long-range dependencies and complex patterns in time series data."
        ],
        "model_training": [
            "The preprocessed data will be split chronologically: the first 80% for training, the next 10% for validation, and the final 10% for testing.",
            "Both the LSTM and Transformer models will be trained on the training dataset to learn the patterns in the stock price movements.",
            "The validation dataset will be used after each epoch to tune hyperparameters and monitor for overfitting.",
            "The loss function transition during the training process will be plotted and saved as an image file."
        ],
        "model_evaluation": [
            "The performance of the trained models will be assessed on the unseen test dataset.",
            "Two evaluation metrics will be calculated: RMSE (Root Mean Squared Error) and MAE (Mean Absolute Error).",
            "The actual and predicted closing prices for the test set will be plotted on a single time-series graph to visually inspect the prediction quality."
        ],
        "improvement_suggestions": [
            "Incorporate technical indicators (e.g., Moving Averages, RSI, MACD) as additional input features.",
            "Integrate external data sources such as market sentiment from news headlines or economic indicators.",
            "Perform extensive hyperparameter tuning (e.g., number of layers, learning rate, sequence length) using techniques like Grid Search or Bayesian Optimization.",
            "Experiment with other time-series forecasting models like GRU or hybrid models (e.g., CNN-LSTM)."
        ]
    },
    "programming_recommendations": {
        "preferred_language": "Python.",
        "libraries": "Pandas, NumPy, scikit-learn, TensorFlow or PyTorch."
    }
}
```

**2. Module Definition:**

* **Name:** visualize_training_history
* **Concrete Tasks:**
    [{'task_id': 'visualize_training_history_1', 'description': "Generates and saves a plot of the training and validation loss for a given model's training history.", 'interface': 'plot_and_save_history(model_history, model_name, output_path)', 'inputs': {'model_history': {'type': 'dict', 'description': "A dictionary-like object containing the training history. Must contain keys 'loss' and 'val_loss', each mapping to a list of floating-point numbers representing the loss at each epoch. This object is typically returned by the Keras `model.fit()` method."}, 'model_name': {'type': 'str', 'description': "The name of the model (e.g., 'LSTM', 'Transformer') to be used in the plot title."}, 'output_path': {'type': 'str', 'description': "The file path where the generated plot image will be saved (e.g., './plots/lstm_loss_history.png')."}}, 'outputs': {'status': {'type': 'str', 'description': 'Returns the path of the saved image file upon successful creation.'}}}]

**3. Input/Output Specifications:**

* **Input Format (with examples):**
    The input 'model_history' must be a dictionary or a Keras History object with 'loss' and 'val_loss' keys, where values are lists of floats. 'model_name' and 'output_path' must be valid non-empty strings.
* **Data Head (example):**
```
      Date  Actual_Price  LSTM_Prediction  Transformer_Prediction
2024/11/20    145.889999       141.398661               31.718358
2024/11/21    146.670002       141.413460               31.718761
2024/11/22    141.950004       141.614236               31.719767
2024/11/25    136.019997       141.619491               31.721860
2024/11/26    136.920003       141.207187               31.723897
2024/11/27    135.340003       140.523489               31.726888
```
* **Data Path:**
    C:\Users\T25ma\OneDrive\Desktop\AUTO_SYSTEM_Claude\UNITTEST_DATA\generated\input_for_visualize_prediction_results.csv
* **Expected Output Format (with examples):**
    r'The module's primary output is the side effect of saving image files to the disk in PNG format. The function should return a string containing the path to the saved file.'

**4. Constraints and Dependencies:**
* **Library Versions and Configurations:**
    Use Python 3.8+. Required libraries: matplotlib (version 3.5.0 or newer). Plots must be saved in PNG format with a resolution of at least 300 DPI.
* **Error Handling Requirements (specific errors to handle and how):**
    Any I/O errors during file saving must be logged with a timestamp and error message. Invalid input data should result in a ValueError or KeyError with a message indicating the exact problem (e.g., 'Missing val_loss key in history object').

**5. Code Skeleton (if applicable):**
    import matplotlib.pyplot as plt
from typing import Dict, List

def plot_and_save_history(model_history: Dict[str, List[float]], model_name: str, output_path: str) -> str:
    """
    Plots the training and validation loss from a model's training history and saves it to a file.

    Args:
        model_history (Dict[str, List[float]]): A dictionary from Keras history, 
                                                 containing 'loss' and 'val_loss' lists.
        model_name (str): The name of the model, used for the plot title (e.g., 'LSTM').
        output_path (str): The path to save the plot image file.

    Returns:
        str: The path where the plot was saved.

    Raises:
        KeyError: If 'loss' or 'val_loss' keys are not in model_history.
        IOError: If the file cannot be saved to the specified output_path.
    """
    if 'loss' not in model_history or 'val_loss' not in model_history:
        raise KeyError("The 'model_history' dictionary must contain 'loss' and 'val_loss' keys.")

    plt.figure(figsize=(10, 6))
    plt.plot(model_history['loss'], label='Training Loss')
    plt.plot(model_history['val_loss'], label='Validation Loss')
    plt.title(f'{model_name} Model - Training & Validation Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()
    plt.grid(True)
    
    try:
        plt.savefig(output_path, dpi=300)
        plt.close()
    except IOError as e:
        print(f"Error saving plot to {output_path}: {e}")
        raise

    return output_path


**6. Implementation Guidelines:**

* **Data Retrieval Instructions:** Implement the process to load the dataset using the provided `data_path`. Adapt the retrieval method to the data source (e.g., CSV, JSON, database, or API). Ensure the program checks the validity of `data_path` and automatically loads the data without user intervention. If the file is missing or corrupted, handle errors with informative messages. Optionally, provide mock data for testing purposes to allow the program to proceed. ```python
import pandas as pd
import os

def load_data(data_path: str):
    if not os.path.exists(data_path):
        raise FileNotFoundError(f"Error: File not found at {data_path}")
    try:
        # Adjust loading logic based on file type
        if data_path.endswith('.csv'):
            return pd.read_csv(data_path)
        elif data_path.endswith('.json'):
            return pd.read_json(data_path)
        else:
            raise ValueError("Unsupported file format. Please provide a CSV or JSON file.")
    except Exception as e:
        raise ValueError(f"Error loading data: {e}")
```
* **main Function Instructions:** Implement a main function as the program's entry point. The main function should be designed to execute without requiring any user input during runtime. Use the provided `data_path` to automatically load the necessary data. If the data is missing or the path is incorrect, handle errors with informative messages and provide mock data as a fallback if specified. ```python
def main():
    # Use default data path to automatically load data
    data_path = 'C:\Users\T25ma\OneDrive\Desktop\AUTO_SYSTEM_Claude\UNITTEST_DATA\generated\input_for_visualize_prediction_results.csv'

    # Load the data using the specified data path
    try:
        df = load_data(data_path)
        print("Data loaded successfully. Head of the data:")
        print(df.head())
    except FileNotFoundError:
        print("Data file not found. Please check the data path or provide valid data.")
        # Optional: Use mock data if necessary
        mock_data = pd.DataFrame({"column1": [0, 1, 2], "column2": ["sample1", "sample2", "sample3"]})
        print("Using mock data:")
        print(mock_data.head())
    except Exception as e:
        print(f"An error occurred: {e}")
```
* **Clarity and Readability:** Prioritize clear, concise, and well-commented code. Use descriptive variable names and function names.
* **Modularity and Reusability:** Design the code for modularity and reusability, considering potential future extensions.
* **Thorough Error Handling:** Implement robust error handling as specified in the `Error Handling Requirements` section, using appropriate exception classes and informative error messages. Include try-except blocks where necessary.
* **Dependency Management:** If the module requires specific external libraries, clearly indicate these dependencies as comments at the beginning of the code. For example: `# Requires: pandas >= 1.0.0`
* **Adherence to Specifications:** Ensure the generated code strictly adheres to the provided specifications. If any adjustments are necessary due to conflicting or ambiguous information, clearly document the rationale behind these changes in comments.
* **Type Hinting (Recommended):** Use type hinting to improve code readability and maintainability.

