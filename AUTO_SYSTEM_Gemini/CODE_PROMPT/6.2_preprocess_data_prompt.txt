## Generate Python Code for Module: preprocess_data

Please generate Python module code based on the detailed specifications below. Ensure strict adherence to all specified requirements and accurately reflect the provided examples. If there are any ambiguities or contradictions in the specifications, use comments in the code to explain the reasoning and adopt a solution that prioritizes functionality and clarity.

**1. Model Overview:**

* **Role and Purpose:** The purpose of this module is to convert the raw, loaded stock data into a clean, normalized, and structured format required by the downstream deep learning models (LSTM and Transformer). Proper preprocessing is critical for model stability, faster convergence, and accurate predictions. This module bridges the gap between raw data and the model training phase.
* **Overall Specification:**
```json
{
    "model_role": "An AI model to predict the next-day closing price of NVIDIA stock using historical price data.",
    "instructions": [
        "Load the user-provided CSV file containing daily OHLC data.",
        "Preprocess the data: handle missing values, normalize features, and create sequential data for time series forecasting.",
        "Split the dataset chronologically into training (80%), validation (10%), and test (10%) sets.",
        "Build two separate deep learning models: one using LSTM and another using a Transformer architecture.",
        "Train both models on the training set, using the validation set to monitor performance and prevent overfitting.",
        "Evaluate the trained models on the test set using RMSE and MAE as performance metrics.",
        "Visualize the prediction results by overlaying predicted values on actual values in a time series graph.",
        "Generate a plot showing the training and validation loss function transition over epochs for each model."
    ],
    "constraints": [
        "The sole data source must be the user-provided CSV file.",
        "Only Open, High, Low, Close (OHLC) data from the file should be used as input features.",
        "The model must predict the closing price for only one day ahead.",
        "The selection of predictive models is strictly limited to LSTM and Transformer.",
        "External data sources or APIs for data acquisition are prohibited."
    ],
    "model_details": {
        "data_acquisition": [
            "The model will be built using a single CSV file provided by the user.",
            "The file must contain daily stock data for the last 5.5 years with columns for 'Date', 'Open', 'High', 'Low', and 'Close'.",
            "Note: The data will be provided by the user directly. Do not use APIs, libraries, or external sources to acquire data without explicit instructions from the user."
        ],
        "data_preprocessing": [
            "Check for and handle any missing values in the dataset (e.g., using forward fill).",
            "Normalize the OHLC data using a scaler like MinMaxScaler to a range of [0, 1] to improve model stability and convergence.",
            "Create input sequences (X) and corresponding target values (y). For example, use a sliding window of the past 60 days of OHLC data to predict the closing price of the 61st day."
        ],
        "model_selection": [
            "Two models will be implemented and compared:",
            "1. LSTM (Long Short-Term Memory): A type of Recurrent Neural Network (RNN) well-suited for learning from sequential data like time series.",
            "2. Transformer: A model architecture based on self-attention mechanisms, which can capture long-range dependencies and complex patterns in time series data."
        ],
        "model_training": [
            "The preprocessed data will be split chronologically: the first 80% for training, the next 10% for validation, and the final 10% for testing.",
            "Both the LSTM and Transformer models will be trained on the training dataset to learn the patterns in the stock price movements.",
            "The validation dataset will be used after each epoch to tune hyperparameters and monitor for overfitting.",
            "The loss function transition during the training process will be plotted and saved as an image file."
        ],
        "model_evaluation": [
            "The performance of the trained models will be assessed on the unseen test dataset.",
            "Two evaluation metrics will be calculated: RMSE (Root Mean Squared Error) and MAE (Mean Absolute Error).",
            "The actual and predicted closing prices for the test set will be plotted on a single time-series graph to visually inspect the prediction quality."
        ],
        "improvement_suggestions": [
            "Incorporate technical indicators (e.g., Moving Averages, RSI, MACD) as additional input features.",
            "Integrate external data sources such as market sentiment from news headlines or economic indicators.",
            "Perform extensive hyperparameter tuning (e.g., number of layers, learning rate, sequence length) using techniques like Grid Search or Bayesian Optimization.",
            "Experiment with other time-series forecasting models like GRU or hybrid models (e.g., CNN-LSTM)."
        ]
    },
    "programming_recommendations": {
        "preferred_language": "Python.",
        "libraries": "Pandas, NumPy, scikit-learn, TensorFlow or PyTorch."
    }
}
```

**2. Module Definition:**

* **Name:** preprocess_data
* **Concrete Tasks:**
    [{'task_id': 'preprocess_data_1', 'function_name': 'handle_missing_values', 'description': "Checks for and fills any missing values in the OHLC columns of the input DataFrame using the forward fill ('ffill') method.", 'input': {'df': 'pandas.DataFrame containing OHLC data.'}, 'output': {'df_filled': 'pandas.DataFrame with missing values handled.'}}, {'task_id': 'preprocess_data_2', 'function_name': 'normalize_data', 'description': "Normalizes the OHLC feature columns to a range of [0, 1] using scikit-learn's MinMaxScaler. The fitted scaler object is returned for later use in inverse-transforming the predictions.", 'input': {'df': 'pandas.DataFrame with OHLC data.'}, 'output': {'scaled_data': 'numpy.ndarray of shape (n_samples, n_features) with values scaled between 0 and 1.', 'scaler': 'sklearn.preprocessing.MinMaxScaler object fitted to the data.'}}, {'task_id': 'preprocess_data_3', 'function_name': 'create_sequences', 'description': 'Converts the time-series data into input sequences and corresponding target values. It uses a sliding window of 60 days of OHLC data (X) to predict the closing price of the 61st day (y).', 'input': {'data': 'numpy.ndarray of scaled OHLC data.', 'sequence_length': 'integer, the number of past time steps to use as input features (e.g., 60).'}, 'output': {'X': 'numpy.ndarray of shape (n_samples, sequence_length, n_features) containing the input sequences.', 'y': 'numpy.ndarray of shape (n_samples,) containing the target closing prices.'}}, {'task_id': 'preprocess_data_4', 'function_name': 'split_data', 'description': 'Splits the sequential data chronologically into training (80%), validation (10%), and test (10%) sets.', 'input': {'X': 'numpy.ndarray of input sequences.', 'y': 'numpy.ndarray of target values.'}, 'output': {'splits': "A dictionary containing six numpy arrays: 'X_train', 'y_train', 'X_val', 'y_val', 'X_test', 'y_test'."}}]

**3. Input/Output Specifications:**

* **Input Format (with examples):**
    {'description': "A single pandas DataFrame provided by the `load_data` module. This DataFrame must contain at least the columns 'Open', 'High', 'Low', 'Close' with data types convertible to numeric (e.g., float64, int64).", 'schema': {'type': 'pandas.DataFrame', 'columns': {'Open': 'numeric', 'High': 'numeric', 'Low': 'numeric', 'Close': 'numeric'}}}
* **Data Head (example):**
```
    Date  Open  High  Low  Close
2020/1/2  5.97  6.00 5.92   6.00
2020/1/3  5.88  5.95 5.85   5.90
2020/1/6  5.81  5.93 5.78   5.93
2020/1/7  5.96  6.04 5.91   6.00
2020/1/8  5.99  6.05 5.95   6.01
2020/1/9  6.10  6.15 6.02   6.08
```
* **Data Path:**
    C:\Users\T25ma\OneDrive\Desktop\AUTO_SYSTEM_Gemini\UNITTEST_DATA\generated\expected_input.csv
* **Expected Output Format (with examples):**
    r'{'description': 'A dictionary containing the preprocessed and split data, along with the scaler object. The data arrays should be of type numpy.float32 for compatibility with deep learning frameworks.', 'schema': {'type': 'dict', 'keys': {'X_train': 'numpy.ndarray (shape: [num_train_samples, 60, 4], dtype: float32)', 'y_train': 'numpy.ndarray (shape: [num_train_samples,], dtype: float32)', 'X_val': 'numpy.ndarray (shape: [num_val_samples, 60, 4], dtype: float32)', 'y_val': 'numpy.ndarray (shape: [num_val_samples,], dtype: float32)', 'X_test': 'numpy.ndarray (shape: [num_test_samples, 60, 4], dtype: float32)', 'y_test': 'numpy.ndarray (shape: [num_test_samples,], dtype: float32)', 'scaler': 'sklearn.preprocessing.MinMaxScaler'}}}'

**4. Constraints and Dependencies:**
* **Library Versions and Configurations:**
    Python 3.8+, pandas>=1.3.0, numpy>=1.20.0, scikit-learn>=1.0.0. The MinMaxScaler should use feature_range=(0, 1). The sequence length for creating windows must be fixed at 60.
* **Error Handling Requirements (specific errors to handle and how):**
    Any `ValueError` should be logged with a descriptive message indicating the cause (e.g., 'Input DataFrame is missing required columns', 'Not enough data to create sequences'). If missing values remain at the start of the dataframe after forward fill, those rows should be dropped, and a warning should be logged.

**5. Code Skeleton (if applicable):**
    from typing import Dict, Tuple, List
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler

class DataPreprocessor:
    def __init__(self, sequence_length: int = 60):
        """
        Initializes the preprocessor with a fixed sequence length.
        """
        self.sequence_length = sequence_length
        self.scaler = MinMaxScaler(feature_range=(0, 1))
        self.feature_cols = ['Open', 'High', 'Low', 'Close']

    def _handle_missing_values(self, df: pd.DataFrame) -> pd.DataFrame:
        """Fills missing values using forward fill and drops any remaining NaNs."""
        pass

    def _normalize_data(self, df: pd.DataFrame) -> np.ndarray:
        """Scales the feature columns using MinMaxScaler."""
        pass

    def _create_sequences(self, data: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:
        """Creates input sequences and target values from scaled data."""
        pass

    def _split_data(self, X: np.ndarray, y: np.ndarray) -> Dict[str, np.ndarray]:
        """Splits data chronologically into train, validation, and test sets."""
        pass

    def process(self, df: pd.DataFrame) -> Dict[str, any]:
        """
        Executes the full preprocessing pipeline.

        Args:
            df (pd.DataFrame): The raw input DataFrame with OHLC data.

        Returns:
            Dict[str, any]: A dictionary containing the split datasets (X_train, y_train, etc.)
                            and the fitted scaler object.
        """
        # 1. Validate and select features
        # 2. Handle missing values
        # 3. Normalize data
        # 4. Create sequences
        # 5. Split data
        # 6. Return dictionary with all artifacts
        pass


**6. Implementation Guidelines:**

* **Data Retrieval Instructions:** Implement the process to load the dataset using the provided `data_path`. Adapt the retrieval method to the data source (e.g., CSV, JSON, database, or API). Ensure the program checks the validity of `data_path` and automatically loads the data without user intervention. If the file is missing or corrupted, handle errors with informative messages. Optionally, provide mock data for testing purposes to allow the program to proceed. ```python
import pandas as pd
import os

def load_data(data_path: str):
    if not os.path.exists(data_path):
        raise FileNotFoundError(f"Error: File not found at {data_path}")
    try:
        # Adjust loading logic based on file type
        if data_path.endswith('.csv'):
            return pd.read_csv(data_path)
        elif data_path.endswith('.json'):
            return pd.read_json(data_path)
        else:
            raise ValueError("Unsupported file format. Please provide a CSV or JSON file.")
    except Exception as e:
        raise ValueError(f"Error loading data: {e}")
```
* **main Function Instructions:** Implement a main function as the program's entry point. The main function should be designed to execute without requiring any user input during runtime. Use the provided `data_path` to automatically load the necessary data. If the data is missing or the path is incorrect, handle errors with informative messages and provide mock data as a fallback if specified. ```python
def main():
    # Use default data path to automatically load data
    data_path = 'C:\Users\T25ma\OneDrive\Desktop\AUTO_SYSTEM_Gemini\UNITTEST_DATA\generated\expected_input.csv'

    # Load the data using the specified data path
    try:
        df = load_data(data_path)
        print("Data loaded successfully. Head of the data:")
        print(df.head())
    except FileNotFoundError:
        print("Data file not found. Please check the data path or provide valid data.")
        # Optional: Use mock data if necessary
        mock_data = pd.DataFrame({"column1": [0, 1, 2], "column2": ["sample1", "sample2", "sample3"]})
        print("Using mock data:")
        print(mock_data.head())
    except Exception as e:
        print(f"An error occurred: {e}")
```
* **Clarity and Readability:** Prioritize clear, concise, and well-commented code. Use descriptive variable names and function names.
* **Modularity and Reusability:** Design the code for modularity and reusability, considering potential future extensions.
* **Thorough Error Handling:** Implement robust error handling as specified in the `Error Handling Requirements` section, using appropriate exception classes and informative error messages. Include try-except blocks where necessary.
* **Dependency Management:** If the module requires specific external libraries, clearly indicate these dependencies as comments at the beginning of the code. For example: `# Requires: pandas >= 1.0.0`
* **Adherence to Specifications:** Ensure the generated code strictly adheres to the provided specifications. If any adjustments are necessary due to conflicting or ambiguous information, clearly document the rationale behind these changes in comments.
* **Type Hinting (Recommended):** Use type hinting to improve code readability and maintainability.

