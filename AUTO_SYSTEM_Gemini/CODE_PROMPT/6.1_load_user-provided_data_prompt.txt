## Generate Python Code for Module: load_user-provided_data

Please generate Python module code based on the detailed specifications below. Ensure strict adherence to all specified requirements and accurately reflect the provided examples. If there are any ambiguities or contradictions in the specifications, use comments in the code to explain the reasoning and adopt a solution that prioritizes functionality and clarity.

**1. Model Overview:**

* **Role and Purpose:** As the first step in the data processing pipeline, this module acts as the sole data ingestion point for the system. Its purpose is to abstract the file loading mechanism and provide a standardized raw data object (a pandas DataFrame) to downstream modules, ensuring a consistent starting point for all subsequent data preprocessing and modeling tasks.
* **Overall Specification:**
```json
{
    "model_role": "An AI model to predict the next-day closing price of NVIDIA stock using historical price data.",
    "instructions": [
        "Load the user-provided CSV file containing daily OHLC data.",
        "Preprocess the data: handle missing values, normalize features, and create sequential data for time series forecasting.",
        "Split the dataset chronologically into training (80%), validation (10%), and test (10%) sets.",
        "Build two separate deep learning models: one using LSTM and another using a Transformer architecture.",
        "Train both models on the training set, using the validation set to monitor performance and prevent overfitting.",
        "Evaluate the trained models on the test set using RMSE and MAE as performance metrics.",
        "Visualize the prediction results by overlaying predicted values on actual values in a time series graph.",
        "Generate a plot showing the training and validation loss function transition over epochs for each model."
    ],
    "constraints": [
        "The sole data source must be the user-provided CSV file.",
        "Only Open, High, Low, Close (OHLC) data from the file should be used as input features.",
        "The model must predict the closing price for only one day ahead.",
        "The selection of predictive models is strictly limited to LSTM and Transformer.",
        "External data sources or APIs for data acquisition are prohibited."
    ],
    "model_details": {
        "data_acquisition": [
            "The model will be built using a single CSV file provided by the user.",
            "The file must contain daily stock data for the last 5.5 years with columns for 'Date', 'Open', 'High', 'Low', and 'Close'.",
            "Note: The data will be provided by the user directly. Do not use APIs, libraries, or external sources to acquire data without explicit instructions from the user."
        ],
        "data_preprocessing": [
            "Check for and handle any missing values in the dataset (e.g., using forward fill).",
            "Normalize the OHLC data using a scaler like MinMaxScaler to a range of [0, 1] to improve model stability and convergence.",
            "Create input sequences (X) and corresponding target values (y). For example, use a sliding window of the past 60 days of OHLC data to predict the closing price of the 61st day."
        ],
        "model_selection": [
            "Two models will be implemented and compared:",
            "1. LSTM (Long Short-Term Memory): A type of Recurrent Neural Network (RNN) well-suited for learning from sequential data like time series.",
            "2. Transformer: A model architecture based on self-attention mechanisms, which can capture long-range dependencies and complex patterns in time series data."
        ],
        "model_training": [
            "The preprocessed data will be split chronologically: the first 80% for training, the next 10% for validation, and the final 10% for testing.",
            "Both the LSTM and Transformer models will be trained on the training dataset to learn the patterns in the stock price movements.",
            "The validation dataset will be used after each epoch to tune hyperparameters and monitor for overfitting.",
            "The loss function transition during the training process will be plotted and saved as an image file."
        ],
        "model_evaluation": [
            "The performance of the trained models will be assessed on the unseen test dataset.",
            "Two evaluation metrics will be calculated: RMSE (Root Mean Squared Error) and MAE (Mean Absolute Error).",
            "The actual and predicted closing prices for the test set will be plotted on a single time-series graph to visually inspect the prediction quality."
        ],
        "improvement_suggestions": [
            "Incorporate technical indicators (e.g., Moving Averages, RSI, MACD) as additional input features.",
            "Integrate external data sources such as market sentiment from news headlines or economic indicators.",
            "Perform extensive hyperparameter tuning (e.g., number of layers, learning rate, sequence length) using techniques like Grid Search or Bayesian Optimization.",
            "Experiment with other time-series forecasting models like GRU or hybrid models (e.g., CNN-LSTM)."
        ]
    },
    "programming_recommendations": {
        "preferred_language": "Python.",
        "libraries": "Pandas, NumPy, scikit-learn, TensorFlow or PyTorch."
    }
}
```

**2. Module Definition:**

* **Name:** load_user-provided_data
* **Concrete Tasks:**
    [{'task_id': 'load_user-provided_data_1', 'task_description': 'Load data from a CSV file and perform initial validation.', 'component_type': 'function', 'component_name': 'load_data_from_csv', 'inputs': [{'name': 'file_path', 'type': 'string', 'description': 'The absolute or relative path to the user-provided CSV file.'}], 'processing_steps': ["Validate that the file exists at the given 'file_path'.", 'Use the pandas library to read the CSV file into a DataFrame.', "Check if the loaded DataFrame contains the required columns: 'Date', 'Open', 'High', 'Low', 'Close'.", 'Return the DataFrame without any modifications.'], 'outputs': [{'name': 'raw_dataframe', 'type': 'pandas.DataFrame', 'description': 'A DataFrame containing the raw, unmodified data read from the CSV file.'}]}]

**3. Input/Output Specifications:**

* **Input Format (with examples):**
    The module expects a single string argument ('file_path') pointing to a valid CSV formatted file. The CSV file must be comma-separated and have a header row.
* **Data Head (example):**
```
    Date  Close  Open  High  Low  Volume Change rate %
2020/1/2   6.00  5.97  6.00 5.92 237.68M         2.04%
2020/1/3   5.90  5.88  5.95 5.85 205.77M        -1.67%
2020/1/6   5.93  5.81  5.93 5.78 262.91M         0.51%
2020/1/7   6.00  5.96  6.04 5.91 319.21M         1.18%
2020/1/8   6.01  5.99  6.05 5.95 277.24M         0.17%
2020/1/9   6.08  6.10  6.15 6.02 255.44M         1.16%
```
* **Data Path:**
    C:\Users\T25ma\OneDrive\Desktop\AUTO_SYSTEM_Gemini\UNITTEST_DATA\NVIDIA.csv
* **Expected Output Format (with examples):**
    r'The module must return a single 'pandas.DataFrame' object. This DataFrame will contain the raw data from the CSV. The data types of the columns are not enforced by this module but are expected to be handled by downstream preprocessing modules.'

**4. Constraints and Dependencies:**
* **Library Versions and Configurations:**
    Python 3.8+; pandas>=1.3.0
* **Error Handling Requirements (specific errors to handle and how):**
    In case of an error, the module should log a detailed error message specifying the file path and the nature of the failure (e.g., 'File not found', 'Missing column: Close') before raising the exception. No data should be returned on failure.

**5. Code Skeleton (if applicable):**
    import pandas as pd
import os

def load_data_from_csv(file_path: str) -> pd.DataFrame:
    """
    Loads historical stock data from a user-provided CSV file.

    This function reads a CSV file from the specified path, validates its
    existence and structure, and returns the data as a pandas DataFrame.

    Args:
        file_path (str): The path to the CSV file.

    Returns:
        pd.DataFrame: A DataFrame containing the raw stock data with columns
                      including 'Date', 'Open', 'High', 'Low', and 'Close'.

    Raises:
        FileNotFoundError: If the file at 'file_path' does not exist.
        ValueError: If the CSV file is empty.
        KeyError: If one of the required columns is missing in the CSV file.
    """
    required_columns = ['Date', 'Open', 'High', 'Low', 'Close']

    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Error: The file was not found at {file_path}")

    try:
        data = pd.read_csv(file_path)
    except Exception as e:
        raise ValueError(f"Error parsing CSV file: {e}")

    if data.empty:
        raise ValueError(f"Error: The CSV file at {file_path} is empty.")

    for col in required_columns:
        if col not in data.columns:
            raise KeyError(f"Error: Required column '{col}' not found in the CSV file.")

    return data

**6. Implementation Guidelines:**

* **Data Retrieval Instructions:** Implement the process to load the dataset using the provided `data_path`. Adapt the retrieval method to the data source (e.g., CSV, JSON, database, or API). Ensure the program checks the validity of `data_path` and automatically loads the data without user intervention. If the file is missing or corrupted, handle errors with informative messages. Optionally, provide mock data for testing purposes to allow the program to proceed. ```python
import pandas as pd
import os

def load_data(data_path: str):
    if not os.path.exists(data_path):
        raise FileNotFoundError(f"Error: File not found at {data_path}")
    try:
        # Adjust loading logic based on file type
        if data_path.endswith('.csv'):
            return pd.read_csv(data_path)
        elif data_path.endswith('.json'):
            return pd.read_json(data_path)
        else:
            raise ValueError("Unsupported file format. Please provide a CSV or JSON file.")
    except Exception as e:
        raise ValueError(f"Error loading data: {e}")
```
* **main Function Instructions:** Implement a main function as the program's entry point. The main function should be designed to execute without requiring any user input during runtime. Use the provided `data_path` to automatically load the necessary data. If the data is missing or the path is incorrect, handle errors with informative messages and provide mock data as a fallback if specified. ```python
def main():
    # Use default data path to automatically load data
    data_path = 'C:\Users\T25ma\OneDrive\Desktop\AUTO_SYSTEM_Gemini\UNITTEST_DATA\NVIDIA.csv'

    # Load the data using the specified data path
    try:
        df = load_data(data_path)
        print("Data loaded successfully. Head of the data:")
        print(df.head())
    except FileNotFoundError:
        print("Data file not found. Please check the data path or provide valid data.")
        # Optional: Use mock data if necessary
        mock_data = pd.DataFrame({"column1": [0, 1, 2], "column2": ["sample1", "sample2", "sample3"]})
        print("Using mock data:")
        print(mock_data.head())
    except Exception as e:
        print(f"An error occurred: {e}")
```
* **Clarity and Readability:** Prioritize clear, concise, and well-commented code. Use descriptive variable names and function names.
* **Modularity and Reusability:** Design the code for modularity and reusability, considering potential future extensions.
* **Thorough Error Handling:** Implement robust error handling as specified in the `Error Handling Requirements` section, using appropriate exception classes and informative error messages. Include try-except blocks where necessary.
* **Dependency Management:** If the module requires specific external libraries, clearly indicate these dependencies as comments at the beginning of the code. For example: `# Requires: pandas >= 1.0.0`
* **Adherence to Specifications:** Ensure the generated code strictly adheres to the provided specifications. If any adjustments are necessary due to conflicting or ambiguous information, clearly document the rationale behind these changes in comments.
* **Type Hinting (Recommended):** Use type hinting to improve code readability and maintainability.

