"{\n  \"task_name\": \"visualize_prediction_results\",\n  \"module_responsibility\": \"This module is exclusively responsible for generating graphical representations of the model's prediction results. It takes the actual and predicted time series data for the test set and creates visualizations to allow for qualitative assessment. It does not perform any data preprocessing, model evaluation, or metric calculation.\",\n  \"model_role_and_purpose\": \"The purpose of this module is to provide a clear, intuitive visual comparison between the actual stock closing prices and the prices predicted by the LSTM and Transformer models. By overlaying these time series on a single graph, stakeholders can quickly assess the models' performance in capturing price trends, volatility, and turning points, which complements the quantitative metrics (RMSE, MAE) calculated by the evaluation module.\",\n  \"concrete_tasks\": [\n    {\n      \"task_name\": \"generate_prediction_plot\",\n      \"description\": \"Creates and saves a time-series plot comparing actual test set prices with the predicted prices from both the LSTM and Transformer models.\",\n      \"interface\": \"function\",\n      \"function_name\": \"plot_predictions\",\n      \"inputs\": {\n        \"actual_prices\": {\n          \"type\": \"pandas.Series\",\n          \"description\": \"A pandas Series containing the true closing prices for the test period.\"\n        },\n        \"predicted_prices_lstm\": {\n          \"type\": \"numpy.ndarray\",\n          \"description\": \"An array of predicted closing prices from the LSTM model for the test period.\"\n        },\n        \"predicted_prices_transformer\": {\n          \"type\": \"numpy.ndarray\",\n          \"description\": \"An array of predicted closing prices from the Transformer model for the test period.\"\n        },\n        \"dates\": {\n          \"type\": \"pandas.Series\",\n          \"description\": \"A pandas Series of datetime objects corresponding to the test period, to be used as the x-axis.\"\n        },\n        \"output_path\": {\n          \"type\": \"str\",\n          \"description\": \"The file path (including filename and extension, e.g., 'results/prediction_comparison.png') where the generated plot will be saved.\"\n        }\n      },\n      \"outputs\": {\n        \"saved_plot_path\": {\n          \"type\": \"str\",\n          \"description\": \"Returns the absolute path to the saved image file upon successful generation.\"\n        }\n      },\n      \"processing_steps\": [\n        \"Initialize a plot figure using a library like Matplotlib.\",\n        \"Plot the 'actual_prices' against the 'dates' series as the ground truth line.\",\n        \"Overlay the 'predicted_prices_lstm' on the same plot.\",\n        \"Overlay the 'predicted_prices_transformer' on the same plot.\",\n        \"Set a clear title for the plot (e.g., 'Stock Price Prediction: Actual vs. Predicted').\",\n        \"Label the x-axis ('Date') and y-axis ('Closing Price').\",\n        \"Add a legend to distinguish between the actual, LSTM, and Transformer data series.\",\n        \"Save the plot to the specified 'output_path'.\",\n        \"Return the path of the saved file.\"\n      ]\n    }\n  ],\n  \"dependencies\": [\n    \"evaluate_model\"\n  ],\n  \"constraints\": {\n    \"library_versions_and_configurations\": \"matplotlib>=3.5.0, pandas>=1.3.0, numpy>=1.21.0. The plot style should be consistent, using a predefined theme for clarity and professional appearance (e.g., 'seaborn-v0_8-whitegrid').\",\n    \"error_handling\": \"The module must validate that all input arrays/series ('actual_prices', 'predicted_prices_lstm', 'predicted_prices_transformer', 'dates') have the same length. If not, it must raise a ValueError with a descriptive message. A FileNotFoundError or IOError should be raised if the directory in 'output_path' does not exist or if the file cannot be written due to permissions.\",\n    \"input_formats_and_data_types\": \"Inputs must strictly adhere to the types specified in 'concrete_tasks'. 'actual_prices' and 'dates' must be pandas Series, and 'predicted_prices_lstm' / 'predicted_prices_transformer' must be NumPy arrays. The data within these structures should be numeric (float or integer).\",\n    \"output_formats_and_data_types\": \"The function's return value must be a string representing a valid file path. The generated plot file format should be configurable but default to PNG for high-quality, lossless compression. The plot must include a title, legend, and axis labels to be considered valid.\",\n    \"specific_error_handling\": \"Any exception must be logged with a timestamp, the module name ('visualize_prediction_results'), and a stack trace. For example, 'ERROR:visualize_prediction_results: Input arrays have mismatched lengths. Actual: 100, LSTM: 99.'\"\n  },\n  \"code_skeleton\": \"import pandas as pd\\nimport numpy as np\\nimport matplotlib.pyplot as plt\\nfrom typing import Union\\n\\ndef plot_predictions(\\n    actual_prices: pd.Series,\\n    predicted_prices_lstm: np.ndarray,\\n    predicted_prices_transformer: np.ndarray,\\n    dates: pd.Series,\\n    output_path: str\\n) -> str:\\n    \\\"\\\"\\\"\\n    Generates and saves a time-series plot comparing actual and predicted stock prices.\\n\\n    Args:\\n        actual_prices (pd.Series): The true closing prices for the test set.\\n        predicted_prices_lstm (np.ndarray): Predictions from the LSTM model.\\n        predicted_prices_transformer (np.ndarray): Predictions from the Transformer model.\\n        dates (pd.Series): The corresponding dates for the test set.\\n        output_path (str): The file path to save the plot image.\\n\\n    Returns:\\n        str: The path where the plot was saved.\\n\\n    Raises:\\n        ValueError: If input series/arrays have mismatched lengths.\\n        IOError: If the plot cannot be saved to the specified path.\\n    \\\"\\\"\\\"\\n    # 1. Input validation\\n    if not (len(actual_prices) == len(predicted_prices_lstm) == len(predicted_prices_transformer) == len(dates)):\\n        raise ValueError(\\\"Input data series and arrays must have the same length.\\\")\\n\\n    # 2. Plotting logic\\n    plt.style.use('seaborn-v0_8-whitegrid')\\n    plt.figure(figsize=(15, 7))\\n\\n    plt.plot(dates, actual_prices, color='blue', label='Actual Price')\\n    plt.plot(dates, predicted_prices_lstm, color='orange', linestyle='--', label='LSTM Prediction')\\n    plt.plot(dates, predicted_prices_transformer, color='green', linestyle='-.', label='Transformer Prediction')\\n\\n    # 3. Formatting\\n    plt.title('NVIDIA Stock Price Prediction: Actual vs. Predicted', fontsize=16)\\n    plt.xlabel('Date', fontsize=12)\\n    plt.ylabel('Closing Price (USD)', fontsize=12)\\n    plt.legend()\\n    plt.grid(True)\\n    \\n    # 4. Save and return path\\n    try:\\n        plt.savefig(output_path, dpi=300, bbox_inches='tight')\\n        plt.close()\\n        # Consider returning an absolute path\\n        import os\\n        return os.path.abspath(output_path)\\n    except Exception as e:\\n        # Log the error here\\n        raise IOError(f\\\"Could not save plot to {output_path}. Reason: {e}\\\")\\n\",\n  \"documentation\": \"This module provides the `plot_predictions` function to visualize time-series prediction results. It is designed to be called after model evaluation, taking the actual prices and the predictions from both the LSTM and Transformer models as input. Its sole responsibility is to generate a high-quality, clearly-labeled plot and save it to a specified file location. The module deliberately avoids any form of data manipulation (e.g., inverse scaling) or metric computation, as these tasks are handled by upstream modules ('preprocess_data' and 'evaluate_model' respectively). This clear separation of concerns ensures maintainability and modularity within the system.\"\n}"