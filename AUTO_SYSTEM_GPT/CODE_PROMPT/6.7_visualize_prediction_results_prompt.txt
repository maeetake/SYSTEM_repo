## Generate Python Code for Module: visualize_prediction_results

Please generate Python module code based on the detailed specifications below. Ensure strict adherence to all specified requirements and accurately reflect the provided examples. If there are any ambiguities or contradictions in the specifications, use comments in the code to explain the reasoning and adopt a solution that prioritizes functionality and clarity.

**1. Model Overview:**

* **Role and Purpose:** The purpose of this module is to provide a clear, intuitive visual comparison between the actual stock closing prices and the prices predicted by the LSTM and Transformer models. By overlaying these time series on a single graph, stakeholders can quickly assess the models' performance in capturing price trends, volatility, and turning points, which complements the quantitative metrics (RMSE, MAE) calculated by the evaluation module.
* **Overall Specification:**
```json
{
    "model_role": "An AI model to predict the next-day closing price of NVIDIA stock using historical price data.",
    "instructions": [
        "Load the user-provided CSV file containing daily OHLC data.",
        "Preprocess the data: handle missing values, normalize features, and create sequential data for time series forecasting.",
        "Split the dataset chronologically into training (80%), validation (10%), and test (10%) sets.",
        "Build two separate deep learning models: one using LSTM and another using a Transformer architecture.",
        "Train both models on the training set, using the validation set to monitor performance and prevent overfitting.",
        "Evaluate the trained models on the test set using RMSE and MAE as performance metrics.",
        "Visualize the prediction results by overlaying predicted values on actual values in a time series graph.",
        "Generate a plot showing the training and validation loss function transition over epochs for each model."
    ],
    "constraints": [
        "The sole data source must be the user-provided CSV file.",
        "Only Open, High, Low, Close (OHLC) data from the file should be used as input features.",
        "The model must predict the closing price for only one day ahead.",
        "The selection of predictive models is strictly limited to LSTM and Transformer.",
        "External data sources or APIs for data acquisition are prohibited."
    ],
    "model_details": {
        "data_acquisition": [
            "The model will be built using a single CSV file provided by the user.",
            "The file must contain daily stock data for the last 5.5 years with columns for 'Date', 'Open', 'High', 'Low', and 'Close'.",
            "Note: The data will be provided by the user directly. Do not use APIs, libraries, or external sources to acquire data without explicit instructions from the user."
        ],
        "data_preprocessing": [
            "Check for and handle any missing values in the dataset (e.g., using forward fill).",
            "Normalize the OHLC data using a scaler like MinMaxScaler to a range of [0, 1] to improve model stability and convergence.",
            "Create input sequences (X) and corresponding target values (y). For example, use a sliding window of the past 60 days of OHLC data to predict the closing price of the 61st day."
        ],
        "model_selection": [
            "Two models will be implemented and compared:",
            "1. LSTM (Long Short-Term Memory): A type of Recurrent Neural Network (RNN) well-suited for learning from sequential data like time series.",
            "2. Transformer: A model architecture based on self-attention mechanisms, which can capture long-range dependencies and complex patterns in time series data."
        ],
        "model_training": [
            "The preprocessed data will be split chronologically: the first 80% for training, the next 10% for validation, and the final 10% for testing.",
            "Both the LSTM and Transformer models will be trained on the training dataset to learn the patterns in the stock price movements.",
            "The validation dataset will be used after each epoch to tune hyperparameters and monitor for overfitting.",
            "The loss function transition during the training process will be plotted and saved as an image file."
        ],
        "model_evaluation": [
            "The performance of the trained models will be assessed on the unseen test dataset.",
            "Two evaluation metrics will be calculated: RMSE (Root Mean Squared Error) and MAE (Mean Absolute Error).",
            "The actual and predicted closing prices for the test set will be plotted on a single time-series graph to visually inspect the prediction quality."
        ],
        "improvement_suggestions": [
            "Incorporate technical indicators (e.g., Moving Averages, RSI, MACD) as additional input features.",
            "Integrate external data sources such as market sentiment from news headlines or economic indicators.",
            "Perform extensive hyperparameter tuning (e.g., number of layers, learning rate, sequence length) using techniques like Grid Search or Bayesian Optimization.",
            "Experiment with other time-series forecasting models like GRU or hybrid models (e.g., CNN-LSTM)."
        ]
    },
    "programming_recommendations": {
        "preferred_language": "Python.",
        "libraries": "Pandas, NumPy, scikit-learn, TensorFlow or PyTorch."
    }
}
```

**2. Module Definition:**

* **Name:** visualize_prediction_results
* **Concrete Tasks:**
    [{'task_name': 'generate_prediction_plot', 'description': 'Creates and saves a time-series plot comparing actual test set prices with the predicted prices from both the LSTM and Transformer models.', 'interface': 'function', 'function_name': 'plot_predictions', 'inputs': {'actual_prices': {'type': 'pandas.Series', 'description': 'A pandas Series containing the true closing prices for the test period.'}, 'predicted_prices_lstm': {'type': 'numpy.ndarray', 'description': 'An array of predicted closing prices from the LSTM model for the test period.'}, 'predicted_prices_transformer': {'type': 'numpy.ndarray', 'description': 'An array of predicted closing prices from the Transformer model for the test period.'}, 'dates': {'type': 'pandas.Series', 'description': 'A pandas Series of datetime objects corresponding to the test period, to be used as the x-axis.'}, 'output_path': {'type': 'str', 'description': "The file path (including filename and extension, e.g., 'results/prediction_comparison.png') where the generated plot will be saved."}}, 'outputs': {'saved_plot_path': {'type': 'str', 'description': 'Returns the absolute path to the saved image file upon successful generation.'}}, 'processing_steps': ['Initialize a plot figure using a library like Matplotlib.', "Plot the 'actual_prices' against the 'dates' series as the ground truth line.", "Overlay the 'predicted_prices_lstm' on the same plot.", "Overlay the 'predicted_prices_transformer' on the same plot.", "Set a clear title for the plot (e.g., 'Stock Price Prediction: Actual vs. Predicted').", "Label the x-axis ('Date') and y-axis ('Closing Price').", 'Add a legend to distinguish between the actual, LSTM, and Transformer data series.', "Save the plot to the specified 'output_path'.", 'Return the path of the saved file.']}]

**3. Input/Output Specifications:**

* **Input Format (with examples):**
    Inputs must strictly adhere to the types specified in 'concrete_tasks'. 'actual_prices' and 'dates' must be pandas Series, and 'predicted_prices_lstm' / 'predicted_prices_transformer' must be NumPy arrays. The data within these structures should be numeric (float or integer).
* **Data Head (example):**
```
split   target  Open_t-59  High_t-59  Low_t-59  Close_t-59  Open_t-58  High_t-58  Low_t-58  Close_t-58  Open_t-57  High_t-57  Low_t-57  Close_t-57  Open_t-56  High_t-56  Low_t-56  Close_t-56  Open_t-55  High_t-55  Low_t-55  Close_t-55  Open_t-54  High_t-54  Low_t-54  Close_t-54  Open_t-53  High_t-53  Low_t-53  Close_t-53  Open_t-52  High_t-52  Low_t-52  Close_t-52  Open_t-51  High_t-51  Low_t-51  Close_t-51  Open_t-50  High_t-50  Low_t-50  Close_t-50  Open_t-49  High_t-49  Low_t-49  Close_t-49  Open_t-48  High_t-48  Low_t-48  Close_t-48  Open_t-47  High_t-47  Low_t-47  Close_t-47  Open_t-46  High_t-46  Low_t-46  Close_t-46  Open_t-45  High_t-45  Low_t-45  Close_t-45  Open_t-44  High_t-44  Low_t-44  Close_t-44  Open_t-43  High_t-43  Low_t-43  Close_t-43  Open_t-42  High_t-42  Low_t-42  Close_t-42  Open_t-41  High_t-41  Low_t-41  Close_t-41  Open_t-40  High_t-40  Low_t-40  Close_t-40  Open_t-39  High_t-39  Low_t-39  Close_t-39  Open_t-38  High_t-38  Low_t-38  Close_t-38  Open_t-37  High_t-37  Low_t-37  Close_t-37  Open_t-36  High_t-36  Low_t-36  Close_t-36  Open_t-35  High_t-35  Low_t-35  Close_t-35  Open_t-34  High_t-34  Low_t-34  Close_t-34  Open_t-33  High_t-33  Low_t-33  Close_t-33  Open_t-32  High_t-32  Low_t-32  Close_t-32  Open_t-31  High_t-31  Low_t-31  Close_t-31  Open_t-30  High_t-30  Low_t-30  Close_t-30  Open_t-29  High_t-29  Low_t-29  Close_t-29  Open_t-28  High_t-28  Low_t-28  Close_t-28  Open_t-27  High_t-27  Low_t-27  Close_t-27  Open_t-26  High_t-26  Low_t-26  Close_t-26  Open_t-25  High_t-25  Low_t-25  Close_t-25  Open_t-24  High_t-24  Low_t-24  Close_t-24  Open_t-23  High_t-23  Low_t-23  Close_t-23  Open_t-22  High_t-22  Low_t-22  Close_t-22  Open_t-21  High_t-21  Low_t-21  Close_t-21  Open_t-20  High_t-20  Low_t-20  Close_t-20  Open_t-19  High_t-19  Low_t-19  Close_t-19  Open_t-18  High_t-18  Low_t-18  Close_t-18  Open_t-17  High_t-17  Low_t-17  Close_t-17  Open_t-16  High_t-16  Low_t-16  Close_t-16  Open_t-15  High_t-15  Low_t-15  Close_t-15  Open_t-14  High_t-14  Low_t-14  Close_t-14  Open_t-13  High_t-13  Low_t-13  Close_t-13  Open_t-12  High_t-12  Low_t-12  Close_t-12  Open_t-11  High_t-11  Low_t-11  Close_t-11  Open_t-10  High_t-10  Low_t-10  Close_t-10  Open_t-9  High_t-9  Low_t-9  Close_t-9  Open_t-8  High_t-8  Low_t-8  Close_t-8  Open_t-7  High_t-7  Low_t-7  Close_t-7  Open_t-6  High_t-6  Low_t-6  Close_t-6  Open_t-5  High_t-5  Low_t-5  Close_t-5  Open_t-4  High_t-4  Low_t-4  Close_t-4  Open_t-3  High_t-3  Low_t-3  Close_t-3  Open_t-2  High_t-2  Low_t-2  Close_t-2  Open_t-1  High_t-1  Low_t-1  Close_t-1  Open_t-0  High_t-0  Low_t-0  Close_t-0
 test 0.975505   0.810984   0.838180  0.832938    0.853792   0.831723   0.832296  0.824285    0.835179   0.786057   0.805924  0.782903    0.779685   0.773694   0.787801  0.786462    0.792001   0.749916   0.750338  0.717167    0.713327   0.678308   0.730457  0.695045    0.700941   0.675471   0.705978  0.699511    0.707861   0.696075   0.695834  0.672924    0.677553   0.674728   0.685015  0.692045    0.702740   0.694521   0.704287  0.700837    0.714019   0.705195   0.756965  0.718074    0.774979   0.755523   0.781309  0.773622    0.790410   0.770655   0.775697  0.789114    0.790133   0.755185   0.763660  0.766504    0.774080   0.764507   0.767852  0.769784    0.765846   0.749105   0.760414  0.758548    0.750484   0.758968   0.773668  0.786671    0.781622   0.757009   0.766635  0.773692    0.768683   0.753563   0.755613  0.769993    0.770482   0.753293   0.788139  0.773622    0.802380   0.790515   0.809373  0.817097    0.820648   0.822806   0.827833  0.818423    0.824315   0.803688   0.803219  0.800698    0.806048   0.765453   0.786110  0.792952    0.806324   0.788759   0.792467  0.776483    0.775602   0.752820   0.771774  0.771947    0.788403   0.783084   0.805450  0.808234    0.816081   0.810241   0.810049  0.818632    0.830404   0.810579   0.847917  0.840405    0.849779   0.846180   0.867122  0.871598    0.885552   0.872188   0.874155  0.885276    0.883892   0.857326   0.877401  0.882624    0.898837   0.871513   0.882675  0.901186    0.898768   0.888131   0.908507  0.919609    0.921395   0.897588   0.901542  0.866853    0.876626   0.871310   0.888355  0.886671    0.905134   0.907519   0.917230  0.923587    0.913507   0.902925   0.903773  0.926448    0.920911   0.899345   0.936300  0.931472    0.960421   0.931635   0.941101  0.957851    0.959590   0.925691   0.927644  0.927704    0.931705   0.917517   0.920341  0.934682    0.937586   0.918260   0.939140  0.951012    0.945406   0.932243   0.932445  0.945778    0.938348   0.913936   0.926494  0.937753    0.943399   0.908870   0.913443  0.923168    0.930183   0.895764   0.895050  0.890370    0.884653   0.876174   0.893021  0.907537    0.902920   0.893130   0.904179  0.914515    0.907418   0.894751   0.913714  0.926797    0.934127  0.931973  0.955099 0.959107   0.973568  0.955144  0.971599 0.988486   0.996194  0.971222  0.977279 0.989114   0.987545  0.970614  0.971058 0.970342   0.971146  0.957779  0.976467 0.987369   0.992112  0.973249  0.974303 0.986602   0.978135  0.963588  0.972072 0.984159   0.981525  0.944876  0.946646 0.945987   0.948450  0.908600  0.921693 0.925541   0.935787  0.920894  0.959427 0.952338   0.983255
 test 0.980902   0.831723   0.832296  0.824285    0.835179   0.786057   0.805924  0.782903    0.779685   0.773694   0.787801  0.786462    0.792001   0.749916   0.750338  0.717167    0.713327   0.678308   0.730457  0.695045    0.700941   0.675471   0.705978  0.699511    0.707861   0.696075   0.695834  0.672924    0.677553   0.674728   0.685015  0.692045    0.702740   0.694521   0.704287  0.700837    0.714019   0.705195   0.756965  0.718074    0.774979   0.755523   0.781309  0.773622    0.790410   0.770655   0.775697  0.789114    0.790133   0.755185   0.763660  0.766504    0.774080   0.764507   0.767852  0.769784    0.765846   0.749105   0.760414  0.758548    0.750484   0.758968   0.773668  0.786671    0.781622   0.757009   0.766635  0.773692    0.768683   0.753563   0.755613  0.769993    0.770482   0.753293   0.788139  0.773622    0.802380   0.790515   0.809373  0.817097    0.820648   0.822806   0.827833  0.818423    0.824315   0.803688   0.803219  0.800698    0.806048   0.765453   0.786110  0.792952    0.806324   0.788759   0.792467  0.776483    0.775602   0.752820   0.771774  0.771947    0.788403   0.783084   0.805450  0.808234    0.816081   0.810241   0.810049  0.818632    0.830404   0.810579   0.847917  0.840405    0.849779   0.846180   0.867122  0.871598    0.885552   0.872188   0.874155  0.885276    0.883892   0.857326   0.877401  0.882624    0.898837   0.871513   0.882675  0.901186    0.898768   0.888131   0.908507  0.919609    0.921395   0.897588   0.901542  0.866853    0.876626   0.871310   0.888355  0.886671    0.905134   0.907519   0.917230  0.923587    0.913507   0.902925   0.903773  0.926448    0.920911   0.899345   0.936300  0.931472    0.960421   0.931635   0.941101  0.957851    0.959590   0.925691   0.927644  0.927704    0.931705   0.917517   0.920341  0.934682    0.937586   0.918260   0.939140  0.951012    0.945406   0.932243   0.932445  0.945778    0.938348   0.913936   0.926494  0.937753    0.943399   0.908870   0.913443  0.923168    0.930183   0.895764   0.895050  0.890370    0.884653   0.876174   0.893021  0.907537    0.902920   0.893130   0.904179  0.914515    0.907418   0.894751   0.913714  0.926797    0.934127   0.931973   0.955099  0.959107    0.973568  0.955144  0.971599 0.988486   0.996194  0.971222  0.977279 0.989114   0.987545  0.970614  0.971058 0.970342   0.971146  0.957779  0.976467 0.987369   0.992112  0.973249  0.974303 0.986602   0.978135  0.963588  0.972072 0.984159   0.981525  0.944876  0.946646 0.945987   0.948450  0.908600  0.921693 0.925541   0.935787  0.920894  0.959427 0.952338   0.983255  0.962035  0.962334 0.964480   0.975505
 test 0.948242   0.786057   0.805924  0.782903    0.779685   0.773694   0.787801  0.786462    0.792001   0.749916   0.750338  0.717167    0.713327   0.678308   0.730457  0.695045    0.700941   0.675471   0.705978  0.699511    0.707861   0.696075   0.695834  0.672924    0.677553   0.674728   0.685015  0.692045    0.702740   0.694521   0.704287  0.700837    0.714019   0.705195   0.756965  0.718074    0.774979   0.755523   0.781309  0.773622    0.790410   0.770655   0.775697  0.789114    0.790133   0.755185   0.763660  0.766504    0.774080   0.764507   0.767852  0.769784    0.765846   0.749105   0.760414  0.758548    0.750484   0.758968   0.773668  0.786671    0.781622   0.757009   0.766635  0.773692    0.768683   0.753563   0.755613  0.769993    0.770482   0.753293   0.788139  0.773622    0.802380   0.790515   0.809373  0.817097    0.820648   0.822806   0.827833  0.818423    0.824315   0.803688   0.803219  0.800698    0.806048   0.765453   0.786110  0.792952    0.806324   0.788759   0.792467  0.776483    0.775602   0.752820   0.771774  0.771947    0.788403   0.783084   0.805450  0.808234    0.816081   0.810241   0.810049  0.818632    0.830404   0.810579   0.847917  0.840405    0.849779   0.846180   0.867122  0.871598    0.885552   0.872188   0.874155  0.885276    0.883892   0.857326   0.877401  0.882624    0.898837   0.871513   0.882675  0.901186    0.898768   0.888131   0.908507  0.919609    0.921395   0.897588   0.901542  0.866853    0.876626   0.871310   0.888355  0.886671    0.905134   0.907519   0.917230  0.923587    0.913507   0.902925   0.903773  0.926448    0.920911   0.899345   0.936300  0.931472    0.960421   0.931635   0.941101  0.957851    0.959590   0.925691   0.927644  0.927704    0.931705   0.917517   0.920341  0.934682    0.937586   0.918260   0.939140  0.951012    0.945406   0.932243   0.932445  0.945778    0.938348   0.913936   0.926494  0.937753    0.943399   0.908870   0.913443  0.923168    0.930183   0.895764   0.895050  0.890370    0.884653   0.876174   0.893021  0.907537    0.902920   0.893130   0.904179  0.914515    0.907418   0.894751   0.913714  0.926797    0.934127   0.931973   0.955099  0.959107    0.973568   0.955144   0.971599  0.988486    0.996194  0.971222  0.977279 0.989114   0.987545  0.970614  0.971058 0.970342   0.971146  0.957779  0.976467 0.987369   0.992112  0.973249  0.974303 0.986602   0.978135  0.963588  0.972072 0.984159   0.981525  0.944876  0.946646 0.945987   0.948450  0.908600  0.921693 0.925541   0.935787  0.920894  0.959427 0.952338   0.983255  0.962035  0.962334 0.964480   0.975505  0.975140  0.998377 0.950314   0.980902
 test 0.907210   0.773694   0.787801  0.786462    0.792001   0.749916   0.750338  0.717167    0.713327   0.678308   0.730457  0.695045    0.700941   0.675471   0.705978  0.699511    0.707861   0.696075   0.695834  0.672924    0.677553   0.674728   0.685015  0.692045    0.702740   0.694521   0.704287  0.700837    0.714019   0.705195   0.756965  0.718074    0.774979   0.755523   0.781309  0.773622    0.790410   0.770655   0.775697  0.789114    0.790133   0.755185   0.763660  0.766504    0.774080   0.764507   0.767852  0.769784    0.765846   0.749105   0.760414  0.758548    0.750484   0.758968   0.773668  0.786671    0.781622   0.757009   0.766635  0.773692    0.768683   0.753563   0.755613  0.769993    0.770482   0.753293   0.788139  0.773622    0.802380   0.790515   0.809373  0.817097    0.820648   0.822806   0.827833  0.818423    0.824315   0.803688   0.803219  0.800698    0.806048   0.765453   0.786110  0.792952    0.806324   0.788759   0.792467  0.776483    0.775602   0.752820   0.771774  0.771947    0.788403   0.783084   0.805450  0.808234    0.816081   0.810241   0.810049  0.818632    0.830404   0.810579   0.847917  0.840405    0.849779   0.846180   0.867122  0.871598    0.885552   0.872188   0.874155  0.885276    0.883892   0.857326   0.877401  0.882624    0.898837   0.871513   0.882675  0.901186    0.898768   0.888131   0.908507  0.919609    0.921395   0.897588   0.901542  0.866853    0.876626   0.871310   0.888355  0.886671    0.905134   0.907519   0.917230  0.923587    0.913507   0.902925   0.903773  0.926448    0.920911   0.899345   0.936300  0.931472    0.960421   0.931635   0.941101  0.957851    0.959590   0.925691   0.927644  0.927704    0.931705   0.917517   0.920341  0.934682    0.937586   0.918260   0.939140  0.951012    0.945406   0.932243   0.932445  0.945778    0.938348   0.913936   0.926494  0.937753    0.943399   0.908870   0.913443  0.923168    0.930183   0.895764   0.895050  0.890370    0.884653   0.876174   0.893021  0.907537    0.902920   0.893130   0.904179  0.914515    0.907418   0.894751   0.913714  0.926797    0.934127   0.931973   0.955099  0.959107    0.973568   0.955144   0.971599  0.988486    0.996194   0.971222   0.977279  0.989114    0.987545  0.970614  0.971058 0.970342   0.971146  0.957779  0.976467 0.987369   0.992112  0.973249  0.974303 0.986602   0.978135  0.963588  0.972072 0.984159   0.981525  0.944876  0.946646 0.945987   0.948450  0.908600  0.921693 0.925541   0.935787  0.920894  0.959427 0.952338   0.983255  0.962035  0.962334 0.964480   0.975505  0.975140  0.998377 0.950314   0.980902  0.952037  0.959629 0.953105   0.948242
 test 0.913438   0.749916   0.750338  0.717167    0.713327   0.678308   0.730457  0.695045    0.700941   0.675471   0.705978  0.699511    0.707861   0.696075   0.695834  0.672924    0.677553   0.674728   0.685015  0.692045    0.702740   0.694521   0.704287  0.700837    0.714019   0.705195   0.756965  0.718074    0.774979   0.755523   0.781309  0.773622    0.790410   0.770655   0.775697  0.789114    0.790133   0.755185   0.763660  0.766504    0.774080   0.764507   0.767852  0.769784    0.765846   0.749105   0.760414  0.758548    0.750484   0.758968   0.773668  0.786671    0.781622   0.757009   0.766635  0.773692    0.768683   0.753563   0.755613  0.769993    0.770482   0.753293   0.788139  0.773622    0.802380   0.790515   0.809373  0.817097    0.820648   0.822806   0.827833  0.818423    0.824315   0.803688   0.803219  0.800698    0.806048   0.765453   0.786110  0.792952    0.806324   0.788759   0.792467  0.776483    0.775602   0.752820   0.771774  0.771947    0.788403   0.783084   0.805450  0.808234    0.816081   0.810241   0.810049  0.818632    0.830404   0.810579   0.847917  0.840405    0.849779   0.846180   0.867122  0.871598    0.885552   0.872188   0.874155  0.885276    0.883892   0.857326   0.877401  0.882624    0.898837   0.871513   0.882675  0.901186    0.898768   0.888131   0.908507  0.919609    0.921395   0.897588   0.901542  0.866853    0.876626   0.871310   0.888355  0.886671    0.905134   0.907519   0.917230  0.923587    0.913507   0.902925   0.903773  0.926448    0.920911   0.899345   0.936300  0.931472    0.960421   0.931635   0.941101  0.957851    0.959590   0.925691   0.927644  0.927704    0.931705   0.917517   0.920341  0.934682    0.937586   0.918260   0.939140  0.951012    0.945406   0.932243   0.932445  0.945778    0.938348   0.913936   0.926494  0.937753    0.943399   0.908870   0.913443  0.923168    0.930183   0.895764   0.895050  0.890370    0.884653   0.876174   0.893021  0.907537    0.902920   0.893130   0.904179  0.914515    0.907418   0.894751   0.913714  0.926797    0.934127   0.931973   0.955099  0.959107    0.973568   0.955144   0.971599  0.988486    0.996194   0.971222   0.977279  0.989114    0.987545   0.970614   0.971058  0.970342    0.971146  0.957779  0.976467 0.987369   0.992112  0.973249  0.974303 0.986602   0.978135  0.963588  0.972072 0.984159   0.981525  0.944876  0.946646 0.945987   0.948450  0.908600  0.921693 0.925541   0.935787  0.920894  0.959427 0.952338   0.983255  0.962035  0.962334 0.964480   0.975505  0.975140  0.998377 0.950314   0.980902  0.952037  0.959629 0.953105   0.948242  0.925420  0.925074 0.916260   0.907210
 test 0.902505   0.678308   0.730457  0.695045    0.700941   0.675471   0.705978  0.699511    0.707861   0.696075   0.695834  0.672924    0.677553   0.674728   0.685015  0.692045    0.702740   0.694521   0.704287  0.700837    0.714019   0.705195   0.756965  0.718074    0.774979   0.755523   0.781309  0.773622    0.790410   0.770655   0.775697  0.789114    0.790133   0.755185   0.763660  0.766504    0.774080   0.764507   0.767852  0.769784    0.765846   0.749105   0.760414  0.758548    0.750484   0.758968   0.773668  0.786671    0.781622   0.757009   0.766635  0.773692    0.768683   0.753563   0.755613  0.769993    0.770482   0.753293   0.788139  0.773622    0.802380   0.790515   0.809373  0.817097    0.820648   0.822806   0.827833  0.818423    0.824315   0.803688   0.803219  0.800698    0.806048   0.765453   0.786110  0.792952    0.806324   0.788759   0.792467  0.776483    0.775602   0.752820   0.771774  0.771947    0.788403   0.783084   0.805450  0.808234    0.816081   0.810241   0.810049  0.818632    0.830404   0.810579   0.847917  0.840405    0.849779   0.846180   0.867122  0.871598    0.885552   0.872188   0.874155  0.885276    0.883892   0.857326   0.877401  0.882624    0.898837   0.871513   0.882675  0.901186    0.898768   0.888131   0.908507  0.919609    0.921395   0.897588   0.901542  0.866853    0.876626   0.871310   0.888355  0.886671    0.905134   0.907519   0.917230  0.923587    0.913507   0.902925   0.903773  0.926448    0.920911   0.899345   0.936300  0.931472    0.960421   0.931635   0.941101  0.957851    0.959590   0.925691   0.927644  0.927704    0.931705   0.917517   0.920341  0.934682    0.937586   0.918260   0.939140  0.951012    0.945406   0.932243   0.932445  0.945778    0.938348   0.913936   0.926494  0.937753    0.943399   0.908870   0.913443  0.923168    0.930183   0.895764   0.895050  0.890370    0.884653   0.876174   0.893021  0.907537    0.902920   0.893130   0.904179  0.914515    0.907418   0.894751   0.913714  0.926797    0.934127   0.931973   0.955099  0.959107    0.973568   0.955144   0.971599  0.988486    0.996194   0.971222   0.977279  0.989114    0.987545   0.970614   0.971058  0.970342    0.971146   0.957779   0.976467  0.987369    0.992112  0.973249  0.974303 0.986602   0.978135  0.963588  0.972072 0.984159   0.981525  0.944876  0.946646 0.945987   0.948450  0.908600  0.921693 0.925541   0.935787  0.920894  0.959427 0.952338   0.983255  0.962035  0.962334 0.964480   0.975505  0.975140  0.998377 0.950314   0.980902  0.952037  0.959629 0.953105   0.948242  0.925420  0.925074 0.916260   0.907210  0.896440  0.906478 0.915213   0.913438
```
* **Data Path:**
    C:\Users\T25ma\OneDrive\Desktop\AUTO_SYSTEM_GPT\UNITTEST_DATA\generated\expected_input_for_evaluation.csv
* **Expected Output Format (with examples):**
    r'The function's return value must be a string representing a valid file path. The generated plot file format should be configurable but default to PNG for high-quality, lossless compression. The plot must include a title, legend, and axis labels to be considered valid.'

**4. Constraints and Dependencies:**
* **Library Versions and Configurations:**
    matplotlib>=3.5.0, pandas>=1.3.0, numpy>=1.21.0. The plot style should be consistent, using a predefined theme for clarity and professional appearance (e.g., 'seaborn-v0_8-whitegrid').
* **Error Handling Requirements (specific errors to handle and how):**
    Any exception must be logged with a timestamp, the module name ('visualize_prediction_results'), and a stack trace. For example, 'ERROR:visualize_prediction_results: Input arrays have mismatched lengths. Actual: 100, LSTM: 99.'

**5. Code Skeleton (if applicable):**
    import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from typing import Union

def plot_predictions(
    actual_prices: pd.Series,
    predicted_prices_lstm: np.ndarray,
    predicted_prices_transformer: np.ndarray,
    dates: pd.Series,
    output_path: str
) -> str:
    """
    Generates and saves a time-series plot comparing actual and predicted stock prices.

    Args:
        actual_prices (pd.Series): The true closing prices for the test set.
        predicted_prices_lstm (np.ndarray): Predictions from the LSTM model.
        predicted_prices_transformer (np.ndarray): Predictions from the Transformer model.
        dates (pd.Series): The corresponding dates for the test set.
        output_path (str): The file path to save the plot image.

    Returns:
        str: The path where the plot was saved.

    Raises:
        ValueError: If input series/arrays have mismatched lengths.
        IOError: If the plot cannot be saved to the specified path.
    """
    # 1. Input validation
    if not (len(actual_prices) == len(predicted_prices_lstm) == len(predicted_prices_transformer) == len(dates)):
        raise ValueError("Input data series and arrays must have the same length.")

    # 2. Plotting logic
    plt.style.use('seaborn-v0_8-whitegrid')
    plt.figure(figsize=(15, 7))

    plt.plot(dates, actual_prices, color='blue', label='Actual Price')
    plt.plot(dates, predicted_prices_lstm, color='orange', linestyle='--', label='LSTM Prediction')
    plt.plot(dates, predicted_prices_transformer, color='green', linestyle='-.', label='Transformer Prediction')

    # 3. Formatting
    plt.title('NVIDIA Stock Price Prediction: Actual vs. Predicted', fontsize=16)
    plt.xlabel('Date', fontsize=12)
    plt.ylabel('Closing Price (USD)', fontsize=12)
    plt.legend()
    plt.grid(True)
    
    # 4. Save and return path
    try:
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        plt.close()
        # Consider returning an absolute path
        import os
        return os.path.abspath(output_path)
    except Exception as e:
        # Log the error here
        raise IOError(f"Could not save plot to {output_path}. Reason: {e}")


**6. Implementation Guidelines:**

* **Data Retrieval Instructions:** Implement the process to load the dataset using the provided `data_path`. Adapt the retrieval method to the data source (e.g., CSV, JSON, database, or API). Ensure the program checks the validity of `data_path` and automatically loads the data without user intervention. If the file is missing or corrupted, handle errors with informative messages. Optionally, provide mock data for testing purposes to allow the program to proceed. ```python
import pandas as pd
import os

def load_data(data_path: str):
    if not os.path.exists(data_path):
        raise FileNotFoundError(f"Error: File not found at {data_path}")
    try:
        # Adjust loading logic based on file type
        if data_path.endswith('.csv'):
            return pd.read_csv(data_path)
        elif data_path.endswith('.json'):
            return pd.read_json(data_path)
        else:
            raise ValueError("Unsupported file format. Please provide a CSV or JSON file.")
    except Exception as e:
        raise ValueError(f"Error loading data: {e}")
```
* **main Function Instructions:** Implement a main function as the program's entry point. The main function should be designed to execute without requiring any user input during runtime. Use the provided `data_path` to automatically load the necessary data. If the data is missing or the path is incorrect, handle errors with informative messages and provide mock data as a fallback if specified. ```python
def main():
    # Use default data path to automatically load data
    data_path = 'C:\Users\T25ma\OneDrive\Desktop\AUTO_SYSTEM_GPT\UNITTEST_DATA\generated\expected_input_for_evaluation.csv'

    # Load the data using the specified data path
    try:
        df = load_data(data_path)
        print("Data loaded successfully. Head of the data:")
        print(df.head())
    except FileNotFoundError:
        print("Data file not found. Please check the data path or provide valid data.")
        # Optional: Use mock data if necessary
        mock_data = pd.DataFrame({"column1": [0, 1, 2], "column2": ["sample1", "sample2", "sample3"]})
        print("Using mock data:")
        print(mock_data.head())
    except Exception as e:
        print(f"An error occurred: {e}")
```
* **Clarity and Readability:** Prioritize clear, concise, and well-commented code. Use descriptive variable names and function names.
* **Modularity and Reusability:** Design the code for modularity and reusability, considering potential future extensions.
* **Thorough Error Handling:** Implement robust error handling as specified in the `Error Handling Requirements` section, using appropriate exception classes and informative error messages. Include try-except blocks where necessary.
* **Dependency Management:** If the module requires specific external libraries, clearly indicate these dependencies as comments at the beginning of the code. For example: `# Requires: pandas >= 1.0.0`
* **Adherence to Specifications:** Ensure the generated code strictly adheres to the provided specifications. If any adjustments are necessary due to conflicting or ambiguous information, clearly document the rationale behind these changes in comments.
* **Type Hinting (Recommended):** Use type hinting to improve code readability and maintainability.

